// Code generated by MockGen. DO NOT EDIT.
// Source: ./sdk/pubsub/pubsub.go

// Package mock_pubsub is a generated GoMock package.
package mock_pubsub

import (
	context "context"
	reflect "reflect"

	pubsub "cloud.google.com/go/pubsub"
	gomock "github.com/golang/mock/gomock"
)

// MockSubscriber is a mock of Subscriber interface.
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber.
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance.
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// ProcessMessage mocks base method.
func (m *MockSubscriber) ProcessMessage(arg0 context.Context, arg1 *pubsub.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessMessage", arg0, arg1)
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockSubscriberMockRecorder) ProcessMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockSubscriber)(nil).ProcessMessage), arg0, arg1)
}

// SubscriptionName mocks base method.
func (m *MockSubscriber) SubscriptionName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscriptionName")
	ret0, _ := ret[0].(string)
	return ret0
}

// SubscriptionName indicates an expected call of SubscriptionName.
func (mr *MockSubscriberMockRecorder) SubscriptionName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscriptionName", reflect.TypeOf((*MockSubscriber)(nil).SubscriptionName))
}

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockPublisher) Send(ctx context.Context, topicName string, data, attributes interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, topicName, data, attributes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPublisherMockRecorder) Send(ctx, topicName, data, attributes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPublisher)(nil).Send), ctx, topicName, data, attributes)
}
