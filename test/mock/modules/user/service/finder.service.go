// Code generated by MockGen. DO NOT EDIT.
// Source: ./modules/user/service/finder.service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	entity "gin-starter/entity"
)

// MockUserFinderUseCase is a mock of UserFinderUseCase interface.
type MockUserFinderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserFinderUseCaseMockRecorder
}

// MockUserFinderUseCaseMockRecorder is the mock recorder for MockUserFinderUseCase.
type MockUserFinderUseCaseMockRecorder struct {
	mock *MockUserFinderUseCase
}

// NewMockUserFinderUseCase creates a new mock instance.
func NewMockUserFinderUseCase(ctrl *gomock.Controller) *MockUserFinderUseCase {
	mock := &MockUserFinderUseCase{ctrl: ctrl}
	mock.recorder = &MockUserFinderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFinderUseCase) EXPECT() *MockUserFinderUseCaseMockRecorder {
	return m.recorder
}

// GetUserByEmail mocks base method.
func (m *MockUserFinderUseCase) GetUserByEmail(ctx context.Context, email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserFinderUseCaseMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserFinderUseCase)(nil).GetUserByEmail), ctx, email)
}

// GetUserByForgotPasswordToken mocks base method.
func (m *MockUserFinderUseCase) GetUserByForgotPasswordToken(ctx context.Context, token string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByForgotPasswordToken", ctx, token)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByForgotPasswordToken indicates an expected call of GetUserByForgotPasswordToken.
func (mr *MockUserFinderUseCaseMockRecorder) GetUserByForgotPasswordToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByForgotPasswordToken", reflect.TypeOf((*MockUserFinderUseCase)(nil).GetUserByForgotPasswordToken), ctx, token)
}

// GetUserByID mocks base method.
func (m *MockUserFinderUseCase) GetUserByID(ctx context.Context, id uuid.UUID) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserFinderUseCaseMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserFinderUseCase)(nil).GetUserByID), ctx, id)
}
