// Code generated by MockGen. DO NOT EDIT.
// Source: ./modules/user/repository/user.repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	entity "gin-starter/entity"
)

// MockUserRepositoryUseCase is a mock of UserRepositoryUseCase interface.
type MockUserRepositoryUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryUseCaseMockRecorder
}

// MockUserRepositoryUseCaseMockRecorder is the mock recorder for MockUserRepositoryUseCase.
type MockUserRepositoryUseCaseMockRecorder struct {
	mock *MockUserRepositoryUseCase
}

// NewMockUserRepositoryUseCase creates a new mock instance.
func NewMockUserRepositoryUseCase(ctrl *gomock.Controller) *MockUserRepositoryUseCase {
	mock := &MockUserRepositoryUseCase{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryUseCase) EXPECT() *MockUserRepositoryUseCaseMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockUserRepositoryUseCase) ChangePassword(ctx context.Context, user *entity.User, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", ctx, user, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserRepositoryUseCaseMockRecorder) ChangePassword(ctx, user, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserRepositoryUseCase)(nil).ChangePassword), ctx, user, newPassword)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepositoryUseCase) GetUserByEmail(ctx context.Context, email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryUseCaseMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepositoryUseCase)(nil).GetUserByEmail), ctx, email)
}

// GetUserByForgotPasswordToken mocks base method.
func (m *MockUserRepositoryUseCase) GetUserByForgotPasswordToken(ctx context.Context, token string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByForgotPasswordToken", ctx, token)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByForgotPasswordToken indicates an expected call of GetUserByForgotPasswordToken.
func (mr *MockUserRepositoryUseCaseMockRecorder) GetUserByForgotPasswordToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByForgotPasswordToken", reflect.TypeOf((*MockUserRepositoryUseCase)(nil).GetUserByForgotPasswordToken), ctx, token)
}

// GetUserByID mocks base method.
func (m *MockUserRepositoryUseCase) GetUserByID(ctx context.Context, id uuid.UUID) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryUseCaseMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepositoryUseCase)(nil).GetUserByID), ctx, id)
}

// Update mocks base method.
func (m *MockUserRepositoryUseCase) Update(ctx context.Context, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryUseCaseMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepositoryUseCase)(nil).Update), ctx, user)
}

// UpdateOTP mocks base method.
func (m *MockUserRepositoryUseCase) UpdateOTP(ctx context.Context, user *entity.User, otp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOTP", ctx, user, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOTP indicates an expected call of UpdateOTP.
func (mr *MockUserRepositoryUseCaseMockRecorder) UpdateOTP(ctx, user, otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOTP", reflect.TypeOf((*MockUserRepositoryUseCase)(nil).UpdateOTP), ctx, user, otp)
}
