// Code generated by MockGen. DO NOT EDIT.
// Source: ./modules/auth/service/auth.service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "gin-starter/entity"
)

// MockAuthUseCase is a mock of AuthUseCase interface.
type MockAuthUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUseCaseMockRecorder
}

// MockAuthUseCaseMockRecorder is the mock recorder for MockAuthUseCase.
type MockAuthUseCaseMockRecorder struct {
	mock *MockAuthUseCase
}

// NewMockAuthUseCase creates a new mock instance.
func NewMockAuthUseCase(ctrl *gomock.Controller) *MockAuthUseCase {
	mock := &MockAuthUseCase{ctrl: ctrl}
	mock.recorder = &MockAuthUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUseCase) EXPECT() *MockAuthUseCaseMockRecorder {
	return m.recorder
}

// AuthValidate mocks base method.
func (m *MockAuthUseCase) AuthValidate(ctx context.Context, email, password string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthValidate", ctx, email, password)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthValidate indicates an expected call of AuthValidate.
func (mr *MockAuthUseCaseMockRecorder) AuthValidate(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthValidate", reflect.TypeOf((*MockAuthUseCase)(nil).AuthValidate), ctx, email, password)
}

// AuthValidateCMS mocks base method.
func (m *MockAuthUseCase) AuthValidateCMS(ctx context.Context, email, password string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthValidateCMS", ctx, email, password)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthValidateCMS indicates an expected call of AuthValidateCMS.
func (mr *MockAuthUseCaseMockRecorder) AuthValidateCMS(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthValidateCMS", reflect.TypeOf((*MockAuthUseCase)(nil).AuthValidateCMS), ctx, email, password)
}

// GenerateAccessToken mocks base method.
func (m *MockAuthUseCase) GenerateAccessToken(ctx context.Context, user *entity.User) (*entity.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", ctx, user)
	ret0, _ := ret[0].(*entity.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockAuthUseCaseMockRecorder) GenerateAccessToken(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockAuthUseCase)(nil).GenerateAccessToken), ctx, user)
}

// GenerateAccessTokenCMS mocks base method.
func (m *MockAuthUseCase) GenerateAccessTokenCMS(ctx context.Context, user *entity.User) (*entity.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessTokenCMS", ctx, user)
	ret0, _ := ret[0].(*entity.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessTokenCMS indicates an expected call of GenerateAccessTokenCMS.
func (mr *MockAuthUseCaseMockRecorder) GenerateAccessTokenCMS(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessTokenCMS", reflect.TypeOf((*MockAuthUseCase)(nil).GenerateAccessTokenCMS), ctx, user)
}
