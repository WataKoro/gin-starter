// Code generated by MockGen. DO NOT EDIT.
// Source: ./modules/notification/service/updater.service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockNotificationUpdaterUseCase is a mock of NotificationUpdaterUseCase interface.
type MockNotificationUpdaterUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationUpdaterUseCaseMockRecorder
}

// MockNotificationUpdaterUseCaseMockRecorder is the mock recorder for MockNotificationUpdaterUseCase.
type MockNotificationUpdaterUseCaseMockRecorder struct {
	mock *MockNotificationUpdaterUseCase
}

// NewMockNotificationUpdaterUseCase creates a new mock instance.
func NewMockNotificationUpdaterUseCase(ctrl *gomock.Controller) *MockNotificationUpdaterUseCase {
	mock := &MockNotificationUpdaterUseCase{ctrl: ctrl}
	mock.recorder = &MockNotificationUpdaterUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationUpdaterUseCase) EXPECT() *MockNotificationUpdaterUseCaseMockRecorder {
	return m.recorder
}

// RegisterUnregisterPlayerID mocks base method.
func (m *MockNotificationUpdaterUseCase) RegisterUnregisterPlayerID(ctx context.Context, userID, playerID uuid.UUID, typeReg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUnregisterPlayerID", ctx, userID, playerID, typeReg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUnregisterPlayerID indicates an expected call of RegisterUnregisterPlayerID.
func (mr *MockNotificationUpdaterUseCaseMockRecorder) RegisterUnregisterPlayerID(ctx, userID, playerID, typeReg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUnregisterPlayerID", reflect.TypeOf((*MockNotificationUpdaterUseCase)(nil).RegisterUnregisterPlayerID), ctx, userID, playerID, typeReg)
}

// UpdateReadNotification mocks base method.
func (m *MockNotificationUpdaterUseCase) UpdateReadNotification(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReadNotification", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReadNotification indicates an expected call of UpdateReadNotification.
func (mr *MockNotificationUpdaterUseCaseMockRecorder) UpdateReadNotification(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReadNotification", reflect.TypeOf((*MockNotificationUpdaterUseCase)(nil).UpdateReadNotification), ctx, id)
}
