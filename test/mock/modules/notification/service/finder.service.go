// Code generated by MockGen. DO NOT EDIT.
// Source: ./modules/notification/service/finder.service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	entity "gin-starter/entity"
)

// MockNotificationFinderUseCase is a mock of NotificationFinderUseCase interface.
type MockNotificationFinderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationFinderUseCaseMockRecorder
}

// MockNotificationFinderUseCaseMockRecorder is the mock recorder for MockNotificationFinderUseCase.
type MockNotificationFinderUseCaseMockRecorder struct {
	mock *MockNotificationFinderUseCase
}

// NewMockNotificationFinderUseCase creates a new mock instance.
func NewMockNotificationFinderUseCase(ctrl *gomock.Controller) *MockNotificationFinderUseCase {
	mock := &MockNotificationFinderUseCase{ctrl: ctrl}
	mock.recorder = &MockNotificationFinderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationFinderUseCase) EXPECT() *MockNotificationFinderUseCaseMockRecorder {
	return m.recorder
}

// CountUnreadNotifications mocks base method.
func (m *MockNotificationFinderUseCase) CountUnreadNotifications(ctx context.Context, id uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUnreadNotifications", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUnreadNotifications indicates an expected call of CountUnreadNotifications.
func (mr *MockNotificationFinderUseCaseMockRecorder) CountUnreadNotifications(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUnreadNotifications", reflect.TypeOf((*MockNotificationFinderUseCase)(nil).CountUnreadNotifications), ctx, id)
}

// GetNotification mocks base method.
func (m *MockNotificationFinderUseCase) GetNotification(ctx context.Context, id uuid.UUID, sort, order string, limit, offset int) ([]*entity.Notification, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotification", ctx, id, sort, order, limit, offset)
	ret0, _ := ret[0].([]*entity.Notification)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNotification indicates an expected call of GetNotification.
func (mr *MockNotificationFinderUseCaseMockRecorder) GetNotification(ctx, id, sort, order, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotification", reflect.TypeOf((*MockNotificationFinderUseCase)(nil).GetNotification), ctx, id, sort, order, limit, offset)
}
