// Code generated by MockGen. DO NOT EDIT.
// Source: ./modules/notification/repository/notification.repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	entity "gin-starter/entity"
)

// MockNotificationRepositoryUseCase is a mock of NotificationRepositoryUseCase interface.
type MockNotificationRepositoryUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepositoryUseCaseMockRecorder
}

// MockNotificationRepositoryUseCaseMockRecorder is the mock recorder for MockNotificationRepositoryUseCase.
type MockNotificationRepositoryUseCaseMockRecorder struct {
	mock *MockNotificationRepositoryUseCase
}

// NewMockNotificationRepositoryUseCase creates a new mock instance.
func NewMockNotificationRepositoryUseCase(ctrl *gomock.Controller) *MockNotificationRepositoryUseCase {
	mock := &MockNotificationRepositoryUseCase{ctrl: ctrl}
	mock.recorder = &MockNotificationRepositoryUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepositoryUseCase) EXPECT() *MockNotificationRepositoryUseCaseMockRecorder {
	return m.recorder
}

// CountUnreadNotification mocks base method.
func (m *MockNotificationRepositoryUseCase) CountUnreadNotification(ctx context.Context, id uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUnreadNotification", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUnreadNotification indicates an expected call of CountUnreadNotification.
func (mr *MockNotificationRepositoryUseCaseMockRecorder) CountUnreadNotification(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUnreadNotification", reflect.TypeOf((*MockNotificationRepositoryUseCase)(nil).CountUnreadNotification), ctx, id)
}

// Create mocks base method.
func (m *MockNotificationRepositoryUseCase) Create(ctx context.Context, notification *entity.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNotificationRepositoryUseCaseMockRecorder) Create(ctx, notification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationRepositoryUseCase)(nil).Create), ctx, notification)
}

// GetNotification mocks base method.
func (m *MockNotificationRepositoryUseCase) GetNotification(ctx context.Context, id uuid.UUID, sort, order string, limit, offset int) ([]*entity.Notification, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotification", ctx, id, sort, order, limit, offset)
	ret0, _ := ret[0].([]*entity.Notification)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNotification indicates an expected call of GetNotification.
func (mr *MockNotificationRepositoryUseCaseMockRecorder) GetNotification(ctx, id, sort, order, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotification", reflect.TypeOf((*MockNotificationRepositoryUseCase)(nil).GetNotification), ctx, id, sort, order, limit, offset)
}

// UpdateReadNotification mocks base method.
func (m *MockNotificationRepositoryUseCase) UpdateReadNotification(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReadNotification", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReadNotification indicates an expected call of UpdateReadNotification.
func (mr *MockNotificationRepositoryUseCaseMockRecorder) UpdateReadNotification(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReadNotification", reflect.TypeOf((*MockNotificationRepositoryUseCase)(nil).UpdateReadNotification), ctx, id)
}
