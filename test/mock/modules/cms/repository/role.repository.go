// Code generated by MockGen. DO NOT EDIT.
// Source: ./modules/cms/repository/role.repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	entity "gin-starter/entity"
)

// MockRoleRepositoryUseCase is a mock of RoleRepositoryUseCase interface.
type MockRoleRepositoryUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRepositoryUseCaseMockRecorder
}

// MockRoleRepositoryUseCaseMockRecorder is the mock recorder for MockRoleRepositoryUseCase.
type MockRoleRepositoryUseCaseMockRecorder struct {
	mock *MockRoleRepositoryUseCase
}

// NewMockRoleRepositoryUseCase creates a new mock instance.
func NewMockRoleRepositoryUseCase(ctrl *gomock.Controller) *MockRoleRepositoryUseCase {
	mock := &MockRoleRepositoryUseCase{ctrl: ctrl}
	mock.recorder = &MockRoleRepositoryUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRepositoryUseCase) EXPECT() *MockRoleRepositoryUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRoleRepositoryUseCase) Create(ctx context.Context, role *entity.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRoleRepositoryUseCaseMockRecorder) Create(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleRepositoryUseCase)(nil).Create), ctx, role)
}

// Delete mocks base method.
func (m *MockRoleRepositoryUseCase) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleRepositoryUseCaseMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleRepositoryUseCase)(nil).Delete), ctx, id)
}

// FindAll mocks base method.
func (m *MockRoleRepositoryUseCase) FindAll(ctx context.Context) ([]*entity.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*entity.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockRoleRepositoryUseCaseMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockRoleRepositoryUseCase)(nil).FindAll), ctx)
}

// FindByID mocks base method.
func (m *MockRoleRepositoryUseCase) FindByID(ctx context.Context, id uuid.UUID) (*entity.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entity.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockRoleRepositoryUseCaseMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRoleRepositoryUseCase)(nil).FindByID), ctx, id)
}
