// Code generated by MockGen. DO NOT EDIT.
// Source: ./modules/cms/repository/user_role.repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	entity "gin-starter/entity"
)

// MockUserRoleRepositoryUseCase is a mock of UserRoleRepositoryUseCase interface.
type MockUserRoleRepositoryUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserRoleRepositoryUseCaseMockRecorder
}

// MockUserRoleRepositoryUseCaseMockRecorder is the mock recorder for MockUserRoleRepositoryUseCase.
type MockUserRoleRepositoryUseCaseMockRecorder struct {
	mock *MockUserRoleRepositoryUseCase
}

// NewMockUserRoleRepositoryUseCase creates a new mock instance.
func NewMockUserRoleRepositoryUseCase(ctrl *gomock.Controller) *MockUserRoleRepositoryUseCase {
	mock := &MockUserRoleRepositoryUseCase{ctrl: ctrl}
	mock.recorder = &MockUserRoleRepositoryUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRoleRepositoryUseCase) EXPECT() *MockUserRoleRepositoryUseCaseMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockUserRoleRepositoryUseCase) CreateOrUpdate(ctx context.Context, userRole *entity.UserRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, userRole)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockUserRoleRepositoryUseCaseMockRecorder) CreateOrUpdate(ctx, userRole interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockUserRoleRepositoryUseCase)(nil).CreateOrUpdate), ctx, userRole)
}

// Delete mocks base method.
func (m *MockUserRoleRepositoryUseCase) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRoleRepositoryUseCaseMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRoleRepositoryUseCase)(nil).Delete), ctx, id)
}

// FindByUserID mocks base method.
func (m *MockUserRoleRepositoryUseCase) FindByUserID(ctx context.Context, id uuid.UUID) (*entity.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, id)
	ret0, _ := ret[0].(*entity.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockUserRoleRepositoryUseCaseMockRecorder) FindByUserID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockUserRoleRepositoryUseCase)(nil).FindByUserID), ctx, id)
}

// Update mocks base method.
func (m *MockUserRoleRepositoryUseCase) Update(ctx context.Context, userRole *entity.UserRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, userRole)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRoleRepositoryUseCaseMockRecorder) Update(ctx, userRole interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRoleRepositoryUseCase)(nil).Update), ctx, userRole)
}
