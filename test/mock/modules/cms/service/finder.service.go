// Code generated by MockGen. DO NOT EDIT.
// Source: ./modules/cms/service/finder.service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	entity "gin-starter/entity"
)

// MockCMSFinderUseCase is a mock of CMSFinderUseCase interface.
type MockCMSFinderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCMSFinderUseCaseMockRecorder
}

// MockCMSFinderUseCaseMockRecorder is the mock recorder for MockCMSFinderUseCase.
type MockCMSFinderUseCaseMockRecorder struct {
	mock *MockCMSFinderUseCase
}

// NewMockCMSFinderUseCase creates a new mock instance.
func NewMockCMSFinderUseCase(ctrl *gomock.Controller) *MockCMSFinderUseCase {
	mock := &MockCMSFinderUseCase{ctrl: ctrl}
	mock.recorder = &MockCMSFinderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCMSFinderUseCase) EXPECT() *MockCMSFinderUseCaseMockRecorder {
	return m.recorder
}

// GetAdminUserByID mocks base method.
func (m *MockCMSFinderUseCase) GetAdminUserByID(ctx context.Context, id uuid.UUID) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminUserByID", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminUserByID indicates an expected call of GetAdminUserByID.
func (mr *MockCMSFinderUseCaseMockRecorder) GetAdminUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminUserByID", reflect.TypeOf((*MockCMSFinderUseCase)(nil).GetAdminUserByID), ctx, id)
}

// GetAdminUsers mocks base method.
func (m *MockCMSFinderUseCase) GetAdminUsers(ctx context.Context, query, order, sort string, limit, offset int) ([]*entity.User, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminUsers", ctx, query, order, sort, limit, offset)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAdminUsers indicates an expected call of GetAdminUsers.
func (mr *MockCMSFinderUseCaseMockRecorder) GetAdminUsers(ctx, query, order, sort, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminUsers", reflect.TypeOf((*MockCMSFinderUseCase)(nil).GetAdminUsers), ctx, query, order, sort, limit, offset)
}

// GetRoles mocks base method.
func (m *MockCMSFinderUseCase) GetRoles(ctx context.Context) ([]*entity.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", ctx)
	ret0, _ := ret[0].([]*entity.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockCMSFinderUseCaseMockRecorder) GetRoles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockCMSFinderUseCase)(nil).GetRoles), ctx)
}

// GetUserByID mocks base method.
func (m *MockCMSFinderUseCase) GetUserByID(ctx context.Context, id uuid.UUID) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockCMSFinderUseCaseMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockCMSFinderUseCase)(nil).GetUserByID), ctx, id)
}

// GetUsers mocks base method.
func (m *MockCMSFinderUseCase) GetUsers(ctx context.Context, query, order, sort string, limit, offset int) ([]*entity.User, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, query, order, sort, limit, offset)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockCMSFinderUseCaseMockRecorder) GetUsers(ctx, query, order, sort, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockCMSFinderUseCase)(nil).GetUsers), ctx, query, order, sort, limit, offset)
}
