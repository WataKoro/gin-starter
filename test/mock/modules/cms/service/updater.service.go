// Code generated by MockGen. DO NOT EDIT.
// Source: ./modules/cms/service/updater.service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	entity "gin-starter/entity"
)

// MockCMSUpdaterUseCase is a mock of CMSUpdaterUseCase interface.
type MockCMSUpdaterUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCMSUpdaterUseCaseMockRecorder
}

// MockCMSUpdaterUseCaseMockRecorder is the mock recorder for MockCMSUpdaterUseCase.
type MockCMSUpdaterUseCaseMockRecorder struct {
	mock *MockCMSUpdaterUseCase
}

// NewMockCMSUpdaterUseCase creates a new mock instance.
func NewMockCMSUpdaterUseCase(ctrl *gomock.Controller) *MockCMSUpdaterUseCase {
	mock := &MockCMSUpdaterUseCase{ctrl: ctrl}
	mock.recorder = &MockCMSUpdaterUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCMSUpdaterUseCase) EXPECT() *MockCMSUpdaterUseCaseMockRecorder {
	return m.recorder
}

// ActivateDeactivateUser mocks base method.
func (m *MockCMSUpdaterUseCase) ActivateDeactivateUser(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateDeactivateUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateDeactivateUser indicates an expected call of ActivateDeactivateUser.
func (mr *MockCMSUpdaterUseCaseMockRecorder) ActivateDeactivateUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateDeactivateUser", reflect.TypeOf((*MockCMSUpdaterUseCase)(nil).ActivateDeactivateUser), ctx, id)
}

// UpdateAdmin mocks base method.
func (m *MockCMSUpdaterUseCase) UpdateAdmin(ctx context.Context, user *entity.User, roleID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdmin", ctx, user, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAdmin indicates an expected call of UpdateAdmin.
func (mr *MockCMSUpdaterUseCaseMockRecorder) UpdateAdmin(ctx, user, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdmin", reflect.TypeOf((*MockCMSUpdaterUseCase)(nil).UpdateAdmin), ctx, user, roleID)
}
