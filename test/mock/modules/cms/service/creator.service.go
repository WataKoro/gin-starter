// Code generated by MockGen. DO NOT EDIT.
// Source: ./modules/cms/service/creator.service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	entity "gin-starter/entity"
)

// MockCMSCreatorUseCase is a mock of CMSCreatorUseCase interface.
type MockCMSCreatorUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCMSCreatorUseCaseMockRecorder
}

// MockCMSCreatorUseCaseMockRecorder is the mock recorder for MockCMSCreatorUseCase.
type MockCMSCreatorUseCaseMockRecorder struct {
	mock *MockCMSCreatorUseCase
}

// NewMockCMSCreatorUseCase creates a new mock instance.
func NewMockCMSCreatorUseCase(ctrl *gomock.Controller) *MockCMSCreatorUseCase {
	mock := &MockCMSCreatorUseCase{ctrl: ctrl}
	mock.recorder = &MockCMSCreatorUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCMSCreatorUseCase) EXPECT() *MockCMSCreatorUseCaseMockRecorder {
	return m.recorder
}

// CreateAdmin mocks base method.
func (m *MockCMSCreatorUseCase) CreateAdmin(ctx context.Context, name, email, password, phoneNumber, photo string, dob time.Time, roleID uuid.UUID) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", ctx, name, email, password, phoneNumber, photo, dob, roleID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockCMSCreatorUseCaseMockRecorder) CreateAdmin(ctx, name, email, password, phoneNumber, photo, dob, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockCMSCreatorUseCase)(nil).CreateAdmin), ctx, name, email, password, phoneNumber, photo, dob, roleID)
}

// CreateUser mocks base method.
func (m *MockCMSCreatorUseCase) CreateUser(ctx context.Context, name, email, password, phoneNumber, photo string, dob time.Time) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, name, email, password, phoneNumber, photo, dob)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockCMSCreatorUseCaseMockRecorder) CreateUser(ctx, name, email, password, phoneNumber, photo, dob interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockCMSCreatorUseCase)(nil).CreateUser), ctx, name, email, password, phoneNumber, photo, dob)
}
